#!/bin/bash
# Created by Sergi Ortiz Ropero @ 15/03/2025
# Inputs Gaussian output (RESP and structure)
# Builds Amber FF parameters with RESP charges

# a script to take the Gaussian output and 
# automatically generate a `ligand.lib` `ligand.frcmod`
# and `ligand.mol2` with GAFF and RESP charges

# parse flags
input=''        # .log
resp=''         # .gesp (RESP charges)
charge=0
multiplicity=1
res_name='MOL'  # residue name in the mol2
verbose=0

print_usage() {
    printf "\e[1mUsage:\e[0m\n"
    printf '%b\n' "-i\tINPUT .log FILE\tGaussian RESP job output .log file"
    printf '%b\n' "-r\tINPUT .gesp FILE\tGaussian RESP job output .gesp file"
    printf '%b\n' "-c\tCHARGE\t\tGlobal charge of the ligand. Default 0."
    printf '%b\n' "-m\tMULTIPLICITY\tSpin multiplicity of the ligand, computed as 2S+1. Default 1 (singlet)."
    printf '%b\n' "-n\tRESIDUE NAME\tThree letter residue name code to include in the .mol2 file. Default MOL."
    printf "\n"
    printf '%b\n' "\e[1mExample.\e[0m bash resp_build.sh -i <ligand>.log -r <ligand>.gesp -c 0 -m 1 -n MOL"
    printf "\n"
}

while getopts 'i:r:c:m:n:h' flag; do
  case "${flag}" in
    i) input="${OPTARG}" ;;
    r) resp="${OPTARG}" ;;
    c) charge="${OPTARG}" ;;
    m) multiplicity="${OPTARG}" ;;
    n) res_name="${OPTARG}" ;;
    h)
       print_usage
       exit 0 ;;
    *)
       print_usage
       exit 0 ;;
  esac
done


script_name=$(basename "$0")
printf "Reading a RESP Gaussian16 job with $script_name\n"
printf '%(%d-%m-%Y %H:%M:%S)T\n' -1

#==========================#
#       PREPROCESSING      #
#==========================#

if [ ! -f "$input" ]; then
    echo "Input file $input not found at $PWD base dir"
    echo "Script terminated with an error."
    exit 1
fi

# obtain directories generated by resp_job_gen.sh
LIG_NAME=$(basename "$input" "_resp.log")
GESP_OUTPUT=$resp
ESP_OUTPUT="${LIG_NAME}_resp.esp"


#========================#
#       SCRIPT CORE      #
#========================#

# convert .gesp to .esp
espgen -i $GESP_OUTPUT -o $ESP_OUTPUT 

# generate .ac 
antechamber -i "$input" -fi gout -o "$LIG_NAME.ac" -fo ac -c esp -cf $ESP_OUTPUT

# generate .frcmod
parmchk2 -i "$LIG_NAME.ac" -f ac -o "$LIG_NAME.frcmod" -a Y -w Y

# generate .mol2 (with RESP charges)
antechamber -i "$LIG_NAME.ac" -fi ac -o "$LIG_NAME.mol2" -fo mol2 -rn 'LIG'


printf "\n mol2 and frcmod generated successfully\n"
exit 0